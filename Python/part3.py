# Множество - это неупорядоченный набор значений, мешок.
# У множества нет индексов. Там нет порядка, поэтому не понятно
# откуда взяться индексам.
# Каждый элемент хранится в множестве не более, чем в одном экземпляре.

# set = множество
s = set()
# Для наглядности буду показывать то же самое со списком
t = list()

# Чтобы положить что-то в сет, нужно воспользоваться методом .add()
for i in range(10):
  s.add(i)
  t.append(i)

print("Содержимое МНОЖЕСТВА после добавления чисел из промежутка [0, 10):")
print(*s)
print("Содержимое СПИСКА после добавления тех же чисел:")
print(*t)

# Попробуем ещё раз добавить ТЕ ЖЕ САМЫЕ числа:
for i in range(10):
  s.add(i)
  t.append(i)
print("Ещё раз добавили числа из промежутка [0, 10):")
print("В множество:")
print(*s)
print("В список:")
print(*t)

# Из множества можно удалять элементы методом .discard()
# Сразу говоришь какой элемент удалить, не нужно искать его индекс,
# ведь индекса просто нет.
# Чтобы удалить из массива, тебе нужно знать индекс элемента, который
# хочешь удалить, без него не выйдет
for i in range(10):
  s.discard(i)
print("Удалили числа из промежутка [0, 10) из множества:")
print(*s)
print("Сверху пусто")

# Попробуем ещё раз удалить те же самые числа и убедимся, что
# ничего страшного не случится:
for i in range(10):
  s.discard(i)
print("Всё хорошо")

# Сделаю ещё раз множество из нечётных чисел < 20:
s = set(range(1, 20, 2))
print(*s)

# В множестве очень быстро можно искать элементы. Мгновенно.
for i in range(20):
  # Чтобы проверить, что элемент находится в множестве пиши:
  if i in s:
    print(i, end=' ')
print()

# Преймущество множеств перед списками заключается в скорости.
# Добавление, удаление и поиск - все происходят очень быстро.

# Существует структура "словарь". Она похоже на множество тем,
# что в нём элементы хранятся неупорядоченно, в единственном
# экземпляре и тем, что поиск/вставка/удаление работают быстро.
# Он похож на список тем, что можно как бы обращаться "по индексу",
# но индексы в словаре называются ключами, не индексами.

# Индексы - это числа подряд: 0, 1, 2, 3...
# Ключи могут идти не подряд, могут быть строками или кортежами

# Ключом в словаре может быть число, строка или кортеж (неизменяемый список),
# но сам словарь может хранить в качестве значения что угодно. Пример:

# Сделали сам словарь. dict = dictionary = словарь
d = dict()

# Слева в скобках записан ключ, справа - значение, то что лежит в словаре.
d[5] = 123
d[7] = 'string'
d[10] = ['a', 'b', 'c']
d['Петя'] = 3.1415
d['Вася'] = 'Женя'
d['Таня'] = set()
d[(3, 5)] = 15
d[(2, 3, 5)] = 30

# Давай будем хранить в словаре телефонные номера:
d['Кирилл'] = '88005553535'
d['Вова'] = '84951234567'
d['Лиза'] = '89516544178'

# Вот так можно вывести ключи словаря (левые значения):
print("Ключи словаря:")
print(*d, sep='\n')
print()
# Вот так можно вывести значения словаря (правые значения):
print("Значения словаря:")
print(*d.values(), sep='\n')  # values = значения
print()

# Чтобы пройтись по словарю как по списку и посмотреть все его
# элементы (и слева и справа), нужно сделать так:
print("Содержимое словаря:")
for k, v in d.items():  # items = предметы
  print(k, v)
print()

# Например, можно вывести все элементы ещё вот так:
print("Ещё раз содержимое:")
print(*d.items(), sep='\n')

# Нельзя ИЗМЕНЯТЬ ЗНАЧЕНИЯ словаря, которые ещё не создали.
d[5] += 10  # Это нормально
# Нельзя написать +=, потому что не понятно к чему добавлять,
# ведь нет значения по ключу -8
# d[-8] += 123  # Будет ошибка


